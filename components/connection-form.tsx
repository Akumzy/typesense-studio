"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { ConnectionHistoryManager, type ConnectionConfig } from "../lib/connection-history"
import { Database, RefreshCw, ArrowLeft } from "lucide-react"

interface ConnectionFormProps {
  onConnect: (config: ConnectionConfig) => void
  onBack: () => void
  initialConfig?: {
    host: string
    port: string
    protocol: "http" | "https"
    apiKey: string
  }
  isLoading: boolean
  error: string | null
}

export function ConnectionForm({ onConnect, onBack, initialConfig, isLoading, error }: ConnectionFormProps) {
  const [config, setConfig] = useState({
    name: initialConfig
      ? ConnectionHistoryManager.getDefaultName(initialConfig.host, initialConfig.port, initialConfig.protocol)
      : "",
    host: initialConfig?.host || "localhost",
    port: initialConfig?.port || "",
    protocol: (initialConfig?.protocol || "http") as "http" | "https",
    apiKey: initialConfig?.apiKey || "xyz",
  })

  const [saveToHistory, setSaveToHistory] = useState(true)

  const handleConnect = async () => {
    try {
      // Validate configuration
      if (!config.host.trim()) {
        throw new Error("Host is required")
      }

      if (config.port.trim() && isNaN(Number(config.port))) {
        throw new Error("Port must be a valid number")
      }

      if (!config.apiKey.trim()) {
        throw new Error("API key is required")
      }

      const connectionConfig: ConnectionConfig = {
        id: "", // Will be generated by ConnectionHistoryManager
        name: config.name.trim() || ConnectionHistoryManager.getDefaultName(config.host, config.port, config.protocol),
        host: config.host.trim(),
        port: config.port.trim(),
        protocol: config.protocol,
        apiKey: config.apiKey.trim(),
        createdAt: "", // Will be set by ConnectionHistoryManager
        lastUsed: "", // Will be set by ConnectionHistoryManager
      }

      // Save to history if requested
      let savedConfig = connectionConfig
      if (saveToHistory) {
        savedConfig = ConnectionHistoryManager.saveConnection(connectionConfig)
      }

      onConnect(savedConfig)
    } catch (err) {
      console.error("Connection validation failed:", err)
    }
  }

  const updateConfig = (key: string, value: string) => {
    setConfig((prev) => ({ ...prev, [key]: value }))
  }

  return (
    <Card className="max-w-md mx-auto">
      <CardHeader>
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" onClick={onBack}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <CardTitle className="flex items-center gap-2">
              <Database className="h-5 w-5" />
              {initialConfig ? "Edit Connection" : "New Connection"}
            </CardTitle>
            <CardDescription>Configure your Typesense server connection</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name">Connection Name</Label>
          <Input
            id="name"
            value={config.name}
            onChange={(e) => updateConfig("name", e.target.value)}
            placeholder="My Typesense Server"
          />
          <p className="text-xs text-muted-foreground">A friendly name to identify this connection</p>
        </div>

        <div className="space-y-2">
          <Label htmlFor="host">Host</Label>
          <Input
            id="host"
            value={config.host}
            onChange={(e) => updateConfig("host", e.target.value)}
            placeholder="localhost"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="port">Port</Label>
          <Input
            id="port"
            value={config.port}
            onChange={(e) => updateConfig("port", e.target.value)}
            placeholder="8108 (optional - defaults to 80/443)"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="protocol">Protocol</Label>
          <select
            id="protocol"
            value={config.protocol}
            onChange={(e) => updateConfig("protocol", e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md"
          >
            <option value="http">HTTP</option>
            <option value="https">HTTPS</option>
          </select>
        </div>

        <div className="space-y-2">
          <Label htmlFor="apiKey">API Key</Label>
          <Input
            id="apiKey"
            type="password"
            value={config.apiKey}
            onChange={(e) => updateConfig("apiKey", e.target.value)}
            placeholder="Your API key"
          />
        </div>

        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id="saveToHistory"
            checked={saveToHistory}
            onChange={(e) => setSaveToHistory(e.target.checked)}
            className="rounded"
          />
          <Label htmlFor="saveToHistory" className="text-sm">
            Save to connection history
          </Label>
        </div>

        <Button onClick={handleConnect} disabled={isLoading} className="w-full">
          {isLoading ? <RefreshCw className="h-4 w-4 animate-spin mr-2" /> : <Database className="h-4 w-4 mr-2" />}
          Connect
        </Button>

        {error && <div className="p-3 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm">{error}</div>}
      </CardContent>
    </Card>
  )
}
